// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String      @unique
  description  String
  price        Float
  comparePrice Float?
  images       String[]
  category     String
  stock        Int
  featured     Boolean     @default(false)
  active       Boolean     @default(true)
  weight       Float?
  dimensions   String?
  sku          String?     @unique
  tags         String[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
  cartItems    CartItem[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber       String        @unique
  user              User          @relation(fields: [userId], references: [id])
  userId            String        @db.ObjectId
  items             OrderItem[]
  subtotal          Float
  shippingCost      Float         @default(0)
  tax               Float         @default(0)
  total             Float
  status            OrderStatus   @default(PENDING)
  paymentMethod     String
  paymentStatus     PaymentStatus @default(PENDING)
  paymentId         String?
  shippingAddressId String?       @db.ObjectId
  shippingAddress   Address?      @relation(fields: [shippingAddressId], references: [id])
  notes             String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  name      String
  price     Float
  quantity  Int
  total     Float
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Address {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @db.ObjectId
  type      AddressType @default(SHIPPING)
  firstName String
  lastName  String
  company   String?
  street1   String
  street2   String?
  city      String
  state     String?
  country   String
  zipCode   String
  phone     String?
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  orders    Order[]
}

enum AddressType {
  SHIPPING
  BILLING
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?    @db.ObjectId
  sessionId String?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId])
  @@unique([sessionId])
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}

model ContactForm {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String?
  message   String
  phone     String?
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}
